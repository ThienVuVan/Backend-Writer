* Deployment *

* Bàn luận về các môi trường cần thiết để chạy java.

* Các bước để cài đặt server để deploy: (ở đây chọn EC2 của AWS)
	* đăng kí một server linux, ubuntu ...
	* connect vào server trên trang chủ thuê service.
	* đổi password root.
	* ssh vào server ...
	* thêm user.
	* thêm user vào nhóm sudo.
	* cấu hình bật đăng nhập bằng password.
	* từ lần sau ssh bằng tên user, ip và password.
	* ip của server phải được bảo mật, để tránh các cuộc tấn công như DOS, DDOS. lộ ip rất có thể sẽ phải đổi server.
		phần này sẽ được hướng dẫn ở phần sau.
	
	// các bước chi tiết và câu lệnh sẽ được diễn giải chi tiết sau.
		
* các bước để deploy springboot lên server.
	* chạy câu lệnh build chương trình.
		'mvn clean package'
	* vào lấy file jar đã được built nằm trong folder target.
	* dùng các công cụ để đưa file này lên server như FileZilla, ..., hoặc có thể dùng câu lệnh để chuyển file qua internet.
	* chạy file jar này, chú ý thêm '&' vào sau câu lệnh để chương trình được chạy ngầm và không bị tắt.
	* như trên máy local, ứng dụng cũng sẽ được chạy và được truy cập vào trên cổng chỉ định.
	* lưu ý, với cách này phải cài jdk vào server.
	
* các bước để deploy với docker.
	* ở bước trên phải cài jdk, nhưng với docker thì không cần.
	* có nhiều cách để dùng docker.
	* cách 1: tải file jar lên server bình thường, viết docker file để tạo ra một custom image, và chạy container, trong
		dockẻ file cần chọn server có môi trường jdk hợp lý.
	* cách 2: build sẵn image ở local, push lên dockerHub, vào server pull về và chạy.
	* lưu ý: khi viết docker file, container khi chạy là một server riêng biệt, một máy ảo sử dụng công nghệ ảo hóa, chia sẻ
		các tiến trình với server thật, lên phải mapping port trong container với server ngoài.

* các bước để deploy reactjs lên web server và cài đặt reverse proxy.
	* ở đây chọn Nginx làm webserver và reverse proxy
	* cài Nginx
	* chạy dự án reactjs, copy tất cả các file đã được lưu lên server.
		'npm run build'
	* cấu hình nginx nhận domain của bạn, nhận cổng, khi truy cập vào domain sẽ thấy nginx đang chạy.
		* file config của nginx nằm ở etc/nginx/config.
	* đưa các file trong folder build vào thư mục etc/var/www/nginx/html/
	* cấu hình nginx vào file index.html của dự án
	* cấu hình nginx chuyển hướng với các request đến backend.
		* với các request có uri bắt đầu bằng 'api/' thì chuyển hướng đến cổng localhost:8080
		* với các request với uri khác, thì làm tương tự.
	* phần này còn khá sơ sài, cập nhật sau.
	
* các bước để sử dụng cloud service: (các cloud services đều có mô típ kết nối và sử dụng giống nhau, nên chỉ cần nắm bắt
	một số service thì có thể tự tìm hiểu)
	* RDS
		* RDS là database hosting của aws, kết nối khá đơn giản, chỉ cần lấy connectString, user, password trên hệ thống
		là đăng nhập vào sử dụng.
	* S3 Bucket
		* S3 Bucket hỗ trợ lưu data theo file, tệp, giống như ổ cứng bình thường.

* Apache và Apache tomcat. // update

* OracleJDK và OpenJDK.
	* ban đầu, chỉ có một mã bộ mã nguồn java duy nhất là jdk của sun microsystems, khi java được chuyển giao cho oracle
		thì bộ mã nguồn java được đổi tên thành OracleJDK. được Oracle phát triển như một sản phẩm.
	* Vì là Open Source, nên một cộng đồng đã đóng góp rất nhiều vào bộ mã nguồn java, và sinh ra một phiên bản có tên là
		OpenJDK, OpenJDK cũng được được đội ngũ của oracle support phát triển, nhưng có một số tính năng của oraclejdk mà
		openjdk không có, bản oraclejdk có đầy đủ liences nên có nhiều module được chấp nhận sử dụng trên nhiều môi trường
		khác nhau, openjdk đôi khi không có điều này.
	
	* Một sự kiện lớn xẩy ra vào tháng 10 năm 2009, Oracle mua Sun Microsystem, như vậy Java đã chính thức thay đổi chủ sở hữu.
		Hãy chú ý tới thời điểm trước và sau năm 2009.
		
	* Các phiên bản Java từ 1 đến 6 được phát triển bởi Sun Microsystem, họ mở mã nguồn của Java cho tất cả mọi người trên thế giới.
		Tháng 7 năm 2011, Oracle phát hành Java 7, họ đã phát hành 2 biến thể khác nhau của JDK là Oracle JDK và OpenJDK,
		thời điểm đó mã nguồn của 2 biến thể này không có quá nhiều sự khác biệt, bởi vì chúng đều được thừa kế từ JDK 6.

	* OpenJDK được mở mã nguồn, nó được bảo trì và phát triển bởi Oracle, nhưng cho phép cộng đồng và các công ty khác tham
		 gia vào sự phát triển này, chẳng hạn như Red Hat, Azul Systems, IBM, Apple Inc... OpenJDK vừa là một sản phẩm JDK
		 vừa là một đặc tả (specification), bất kỳ một công ty, tổ chức nào muốn sử dụng OpenJDK để tạo ra một biến thể mới
		 phải tuân thủ các đặc tả đó.
	* OpenJDK được phát triển bởi Oracle và sự đóng góp từ cộng đồng, đôi khi chúng ta gặp vấn đề với sự ổn định, dựa trên
		phản hồi của người dùng nó sẽ được nâng cấp để tốt hơn. OpenJDK được cập nhập thường xuyên, khoảng 6 tháng một lần.

	* Oracle JDK được bảo trì và phát triển bởi Oracle, và tuân thủ các đặc tả của OpenJDK, nhưng nó không được mở mã nguồn.
		Oracle JDK tốt hơn nhiều về khả năng đáp ứng và hiệu năng JVM. Nó tập trung nhiều hơn vào sự ổn định do tầm quan trọng
		của nó đối với khách hàng doanh nghiệp của mình.
		
* Các bước để build một dự án spring boot.
	* chuẩn bị Oracle JDK hoặc OpenJDK.
	* sử dụng các ide hỗ trợ tạo spring boot hoặc sử dụng spring initialize.
	* phân chia câu trúc thư mục dự án.
	* liệt kê, tải các thư viện cần thiết.
		* các thư viện của spring boot: springboot-starter, springboot data jpa, springboot security, springboot test,
			springboot validation.
		* các thư viện liên quan: database-connector, Log4j, Mapstruct, Swagger, spring boot devtools, lombok, jwt
			oauth2(nếu triển khai).
		* trong springboot data jpa có hibernate core, jdbc template ...
		* trong springboot validation có hibernate validator.
		* // còn nhiều tự vào thư viện tìm hiểu.
	* code entity
	* config file properties.
	* chạy generate table trong database.
	* config spring security.
		* config CORS // accept all request from different domain or sepecific domain.
		* // update.
	* code and config jwt.
	* triển khai luồng dữ liệu theo mô hình 3 lớp, repository, service, controller.




        [Required(ErrorMessage = "Hãy nhập tên.")]
        [StringLength(100, MinimumLength = 4, ErrorMessage = "Tên phải có ít nhất 4 và tối đa 100 ký tự.")]
        public string? Name { get; set; }

        [Required(ErrorMessage = "Hãy nhập địa chỉ email.")]
        [RegularExpression(@"[A-Za-z0-9._%+-]+@gmail\.com", ErrorMessage = "Địa chỉ email phải có đuôi gmail.com.")]
        public string? Email { get; set; }

        [Required(ErrorMessage = "Hãy nhập mật khẩu.")]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,}$", ErrorMessage = "Mật khẩu phải có ít nhất 8 ký tự, bao gồm chữ hoa, chữ thường, số và ký tự đặc biệt.")]
        public string? Password { get; set; }

        [Required(ErrorMessage = "Hãy chọn chi nhánh.")]
        public Branch? Branch { get; set; }

        [Required(ErrorMessage = "Hãy chọn giới tính.")]
        public Gender? Gender { get; set; }

        public bool IsRegular { get; set; }

        [DataType(DataType.MultilineText)]
        [Required(ErrorMessage = "Hãy nhập địa chỉ.")]
        public string? Address { get; set; }

        [Range(typeof(DateTime), "1/1/1963", "12/31/2005", ErrorMessage = "Ngày sinh phải nằm trong khoảng từ 1/1/1963 đến 31/12/2005.")]
        [DataType(DataType.Date)]
        [Required(ErrorMessage = "Hãy nhập ngày sinh.")]
        public DateTime DateOfBirth { get; set; }

        [Required(ErrorMessage = "Hãy nhập điểm.")]
        [Range(0.0, 10.0, ErrorMessage = "Điểm phải nằm trong khoảng từ 0.0 đến 10.0.")]
        public double? Score { get; set; }
    }
	

<div asp-validation-summary="All" class="text-danger"></div>
 <span asp-validation-for="Name" class="text-danger"></span>
 
 public async Task<ActionResult> Create(Student s)
{
    //s.Id = listStudents.Last<Student>().Id + 1;
    //listStudents.Add(s);

    //return View("Index", listStudents);

    if (ModelState.IsValid)
    {
        s.Id = listStudents.Last<Student>().Id + 1;
        listStudents.Add(s);
        return View("Index", listStudents);
    }
    ViewBag.AllGenders = Enum.GetValues(typeof(Gender)).Cast<Gender>().ToList();
    ViewBag.AllBranches = new List<SelectListItem>()
         {
         new SelectListItem { Text = "IT", Value = "1" },
         new SelectListItem { Text = "BE", Value = "2" },
         new SelectListItem { Text = "CE", Value = "3" },
         new SelectListItem { Text = "EE", Value = "4" }
        };
    return View();
}
	
	
	

	