
* CÁC BƯỚC HOÀN CHỈNH ĐỂ DEPLOY MỘT DỰ ÁN WEB CƠ BẢN SỬ DỤNG CÔNG NGHỆ SPRINGBOOT VÀ REACTJS.

	* Bước 1: Mua một tên miền.
	* Bước 2: Chuẩn bị server (ec2 của aws, vm của azure, ...).
	* Bước 3: Cài đặt DNS cho tên miền (lấy public ipv4 của server gắn cho tên miền).
	* Bước 4: Chuẩn bị Database Hosting (RDS của aws, SQL của google cloud, ...).
	* Bước 5: Chuẩn bị Bucket để lưu các data ngoài Database như image, file, ... (S3 bucket của aws, R2 của google cloud, ...).
	* Bước 6: Nếu Database Hosting hoặc Bucket yêu cầu chỉ cho ip nào truy cập vào để sử dụng, nhớ mở lên và cài đặt lại.
	* Bước 7: Build backend và frontend, cần chú ý các chi tiết sau:
		* Đối với backend:
			* Chỉnh sửa liên kết đúng với database hosting.
			* Chỉnh sửa liên kết đúng với bucket hosting.
			* build project bằng câu lệnh: mvn clean package -> một file jar sẽ được tạo ra trong folder targer.
			  file này được build ra để chạy dự án của springboot.
		* Đối với frontend:
			* chỉnh sửa gọi api đúng với public ipv4 của server, không còn là localhost.
			* build project bằng câu lệnh npm build -> tất cả các file cần thiết để chạy dự án được build ra trong
			  folder build.
	* Bước 8: Cấu hình server
		* truy cập vào server lần đầu bằng cặp public và private key
			ssh -i <name>.pem <user>@<ipv4>
		* đổi mật khẩu root:
			* passwd root -> change password root (keep password security).
		* tạo user mới để sử dụng: 
			adduser <name>
			// các bước sau làm theo flow của server.
		* cấp quyền sudo cho user mới tạo.
			* sau này khi làm việc với sudo privilage, ta không sử dụng root, nếu bị lộ root password, hệ thống dễ bị xâm nhập
			  nên cần cấp quyền sudo cho user và sử dụng user đó để làm việc với server.
		* cấu hình mở truy cập vào server với authentication password.
			* vi /etc/ssh/sshd_config
			* thay đổi dòng: passwordauthentication no -> passwordauthentication yes;
			* exit và reboot lại server: reboot.
			* lưu ý: nếu vẫn không authen password được, truy cập vào cloud, reset lại password.
			* khi đã authen được password, login lại bằng password với user mới tạo: ssh <name>@<ipv4>.
		* Cài đặt jdk cho server.
			* apt-get update: tải cập nhập mới nhất về server.
			* apt-get upgrade: cập nhật mới nhất đã tải.
			* apt install openjdk-17-jdk openjdk-17-jre // cài jdk.
			* java --version // check java version -> ok.
		* cài đặt nginx (web server deploy reactjs, reverse proxy bắt request cho backend).
			* sudo apt update
			* sudo apt install nginx
			* systemctl status nginx // check status nginx.
			* now you can check your nginx server: http://<your server ip> -> nginx will return default html.
			* futher command line using when config nginx:
				* sudo systemctl stop nginx
				* sudo systemctl start 
				* sudo systemctl restart nginx
				* sudo systemctl enable nginx
	* Bước 9: tải mã nguồn lên server.
		* Công cụ sử dụng: FileZilla
			* Mở FileZilla lên, nhập ip server, usename, password, port(22) rồi kết nối với server.
		* Đối với backend:
			* đối với file chạy backend: tải vào thư mục /home/<current_user>/
			* lưu ý: trong quá trình tải, nếu lỗi có thể do destination không thuộc về user đang tạo hoặc không có quyên ghi,
				cần đăng nhập bằng root để có toàn quyền hoặc truy cập vào server để thay đổi chế độ trên destination.
		* Đối với frontend:
			* vào /var/www/
			* tạo thư mục mới, thư mục đại diện cho project của bạn.
			* ví dụ: /var/www/bookstore.
			* tạo thư mục html tiếp trong thư mục project
			* ví dụ: /var/www/bookstore/htlm
			* tải tất cả trong thư mục build trên local vào trong thư mục html.
	* Bước 10: cấu hình nginx server.
		* vào file /etc/nginx/nginx.conf bạn sẽ thấy hai dòng sau:
			* include /etc/nginx/conf.d/*.conf;
			* include /etc/nginx/sites-enabled/*;
			* // hai dòng trê nghĩa là mọi file trong folder sites-enabled sẽ được đọc và build.
		* tạo file và cách câu hình cho frontend và backend.
			* vào thư mục /etc/nginx/sites-available
			* tạo một file đại diện cho một config của project.
			* ví dụ: /etc/nginx/sites-available/bookstore.
			// bạn có thể thấy file default trong thư mục này, đó là file default config khi bạn gọi đến server bằng giao thức
				http (port 80) và nginx trả về một trang html mặc định.
			* trong file config của dự án của bạn, bạn cấu hình theo cấu trúc như sau:
				server {
				       listen 80; // lắng nghe tín hiệu cổng 80 (http)
				       listen [::]:80;
				
				       server_name example.com; // cấu hình nhận server_name gọi đến.
				
				       root /var/www/example.com; // thư mục làm việc của nginx - frontend.
				       index index.html; // thư mục khởi động của nginx.
						
					   
				      location / { // cấu hình chuyển hướng đến backend bằng các nhận diện api gọi đến.
				               try_files $uri $uri/ =404;
				       }
				}
			* trên đây chỉ là một cấu trúc chung, một dự án sẽ deploy như sau:
				server {
				   listen 80;
				   listen [::]:80;

				   root /var/www/bookstore/html;
				   index index.html index.htm index.nginx-debian.html;

				   server_name bookstore.io.vn;

				   access_log /var/log/nginx/bookstore_access.log; // config file access log của nginx được lưu ở đây.
				   error_log  /var/log/nginx/bookstore_error.log; // config file error log của nginx được lưu ở đây.

				   location / {
							try_files $uri /index.html;
				   }

				   location /api { // đối với request gọi đến mà bắt đầu bằng /api thì chuyển hướng sang cổng 8080 đang chạy backend.
							proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
							proxy_set_header X-Forwarded-Proto $scheme;
							proxy_set_header X-Real-IP $remote_addr;
							proxy_set_header Host $http_host;
							proxy_pass http://localhost:8080;
							proxy_redirect off;
				   }
				   
				   // phần dưới đây là dùng cho swagger-ui trong springboot.
				   
				   location /swagger-ui {
						proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
						proxy_set_header X-Forwarded-Proto $scheme;
						proxy_set_header X-Real-IP $remote_addr;
						proxy_set_header Host $http_host;
						proxy_pass http://localhost:8080;
						proxy_redirect off;
					}

					location /swagger-resources {
						proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
						proxy_set_header X-Forwarded-Proto $scheme;
						proxy_set_header X-Real-IP $remote_addr;
						proxy_set_header Host $http_host;
						proxy_pass http://localhost:8080;
						proxy_redirect off;
					}

					location /v3/api-docs {
						proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
						proxy_set_header X-Forwarded-Proto $scheme;
						proxy_set_header X-Real-IP $remote_addr;
						proxy_set_header Host $http_host;
						proxy_pass http://localhost:8080;
						proxy_redirect off;
					}
				}
			* check xem config đã đúng chưa bằng câu lệnh:
				* sudo nginx -t
				* reload lại nginx khi nginx thông báo test successful.
			* Link file config từ site-available sang site-enable
				* vì file nginx.conf của nginx chỉ đọc các file config trong site-enable.
				* sudo ln -s /etc/nginx/sites-available/<file_name> /etc/nginx/sites-enabled/<file_name>
	* Bước 11: chạy backend server.
		* Chạy bằng câu lệnh sau:
			* java -jar <path_to_file> &
			* lưu ý phải có '&' ở cuối để chạy ở chế độ detach.
			* check xem chạy ở chế độ detach chưa: ps aux // xem các tiến trình đang chạy trên server.
	* Bước 12: Chuyển server_name cho Cloudflare quản lý:
		* Trong một trang web bình thường, phải có một bên đứng ra để quản lý tên miền và cung cấp các chứng chỉ an toàn cho
			tên miền đó, như chứng chỉ SSL mà mọi tên miền nên có, nếu không một số trình duyệt sẽ không cho người dùng truy cập
			vào trang wev bởi vì có thể đánh cắp dữ liệu người dùng.
		* Cloudflare là bên trung gian miễn phí giúp quản lý tên miền, cung cấp chứng chỉ SSL cơ bản miễn phí cho các trang web nhỏ.
		* Vào Cloudflare, đăng kí và tạo project mới và gắn tên miền và ipvr của server.
		* khi làm xong bước này, khi ping đến tên miền của bạn, ipv4 của server sẽ không hiện mà là ip của máy chủ chung của 
			Cloudflare, đây là một cơ chế tốt để bảo vệ trang web tránh khỏi các DOS và DOSS attack.
		* và khi ssh đến tên miền thì cũng không đăng nhập được, bới vì bạn đang ssh đến máy chủ của Cloudflare, chứ không phải
			server của bạn. hãy giữ kín ipv4 của máy chủ, không được làm lộ ra ngoài.
		* flow của request từ trình duyệt đến server như sau:
			* broswer gửi request -> request sẽ đến máy chủ Cloudflare, Cloudflare dựa vào tên miền gửi đến server của mình.
			
	* ===>>>> Kết: trên đây là một số bước cơ bản để deploy một web two-side, sẽ update deploy bằng docker as soon as possible.

	
* các bước để sử dụng cloud service: (các cloud services đều có mô típ kết nối và sử dụng giống nhau, nên chỉ cần nắm bắt
	một số service thì có thể tự tìm hiểu)
	* RDS
		* RDS là database hosting của aws, kết nối khá đơn giản, chỉ cần lấy connectString, user, password trên hệ thống
		là đăng nhập vào sử dụng.
	* S3 Bucket
		* S3 Bucket hỗ trợ lưu data theo file, tệp, giống như ổ cứng bình thường.

* Apache và Apache tomcat. // update

* OracleJDK và OpenJDK.
	* ban đầu, chỉ có một mã bộ mã nguồn java duy nhất là jdk của sun microsystems, khi java được chuyển giao cho oracle
		thì bộ mã nguồn java được đổi tên thành OracleJDK. được Oracle phát triển như một sản phẩm.
	* Vì là Open Source, nên một cộng đồng đã đóng góp rất nhiều vào bộ mã nguồn java, và sinh ra một phiên bản có tên là
		OpenJDK, OpenJDK cũng được được đội ngũ của oracle support phát triển, nhưng có một số tính năng của oraclejdk mà
		openjdk không có, bản oraclejdk có đầy đủ liences nên có nhiều module được chấp nhận sử dụng trên nhiều môi trường
		khác nhau, openjdk đôi khi không có điều này.
	
	* Một sự kiện lớn xẩy ra vào tháng 10 năm 2009, Oracle mua Sun Microsystem, như vậy Java đã chính thức thay đổi chủ sở hữu.
		Hãy chú ý tới thời điểm trước và sau năm 2009.
		
	* Các phiên bản Java từ 1 đến 6 được phát triển bởi Sun Microsystem, họ mở mã nguồn của Java cho tất cả mọi người trên thế giới.
		Tháng 7 năm 2011, Oracle phát hành Java 7, họ đã phát hành 2 biến thể khác nhau của JDK là Oracle JDK và OpenJDK,
		thời điểm đó mã nguồn của 2 biến thể này không có quá nhiều sự khác biệt, bởi vì chúng đều được thừa kế từ JDK 6.

	* OpenJDK được mở mã nguồn, nó được bảo trì và phát triển bởi Oracle, nhưng cho phép cộng đồng và các công ty khác tham
		 gia vào sự phát triển này, chẳng hạn như Red Hat, Azul Systems, IBM, Apple Inc... OpenJDK vừa là một sản phẩm JDK
		 vừa là một đặc tả (specification), bất kỳ một công ty, tổ chức nào muốn sử dụng OpenJDK để tạo ra một biến thể mới
		 phải tuân thủ các đặc tả đó.
	* OpenJDK được phát triển bởi Oracle và sự đóng góp từ cộng đồng, đôi khi chúng ta gặp vấn đề với sự ổn định, dựa trên
		phản hồi của người dùng nó sẽ được nâng cấp để tốt hơn. OpenJDK được cập nhập thường xuyên, khoảng 6 tháng một lần.

	* Oracle JDK được bảo trì và phát triển bởi Oracle, và tuân thủ các đặc tả của OpenJDK, nhưng nó không được mở mã nguồn.
		Oracle JDK tốt hơn nhiều về khả năng đáp ứng và hiệu năng JVM. Nó tập trung nhiều hơn vào sự ổn định do tầm quan trọng
		của nó đối với khách hàng doanh nghiệp của mình.
		
* Các bước để build một dự án spring boot.
	* chuẩn bị Oracle JDK hoặc OpenJDK.
	* sử dụng các ide hỗ trợ tạo spring boot hoặc sử dụng spring initialize.
	* phân chia câu trúc thư mục dự án.
	* liệt kê, tải các thư viện cần thiết.
		* các thư viện của spring boot: springboot-starter, springboot data jpa, springboot security, springboot test,
			springboot validation.
		* các thư viện liên quan: database-connector, Log4j, Mapstruct, Swagger, spring boot devtools, lombok, jwt
			oauth2(nếu triển khai).
		* trong springboot data jpa có hibernate core, jdbc template ...
		* trong springboot validation có hibernate validator.
		* // còn nhiều tự vào thư viện tìm hiểu.
	* code entity
	* config file properties.
	* chạy generate table trong database.
	* config spring security.
		* config CORS // accept all request from different domain or sepecific domain.
		* // update.
	* code and config jwt.
	* triển khai luồng dữ liệu theo mô hình 3 lớp, repository, service, controller.


	
	

	