* Cấu trúc dữ liệu và giải thuật *


* Array
	* array là một tập hợp các phần tử có cùng kiểu.
	* phần loại về chiều:
		* 1 chiều: chỉ có 1 index.
		* 2 chiều: có nhiều index.
	* trong java, array là một reference type.
		* được lưu trong bộ nhớ heap.
		* ví dụ: int[] a = new int[5];
		* không giống như c hay cpp, java sẽ tự động dọn bộ nhớ khi
		array không còn được sử dụng.

* Bubble Sort: sắp xếp nổi bọt.
	* nguyên lý:
		* chạy từ đầu đến cuối mảng
		* nếu phần tử đứng trước lớn hơn phần tử đứng sau thì đổi chỗ.
		* sau mỗi vòng lặp thì phần tử lớn nhất sẽ trôi xuống dưới.
	* nhược điểm:
		* nó sẽ đi sắp xếp tất cả.
		* nếu dãy chỉ cần đổi chỗ 1 lần, nó vẫn chạy đủ các bước.
	* có thể áp dụng để check xem chuỗi đã được sắp xếp hay chưa.
		* nếu có sự kiện đổi chỗ là dãy đã được sắp xếp
		
* Insertion Sort:
	* nguyên lý:
		* chạy từ đầu đến cuối mảng.
		* tại vòng lặp i, coi như dãy từ [0,i-1] đã được sắp xếp, chèn phần tử a[i] vào vị trí thích hợp.
		* sau vòng lặp thứ i thì dãy [0,i] đã được sắp xếp.

* Selection Sort:
	* nguyên lý:
		* chạy từ đầu đến cuối mảng
		* tại vòng lặp thứ i, tìm phần tử nhỏ nhất [i+1, n-1]
		nếu nhỏ hơn a[i], thì đổi chỗ cho a[i].
		* sau vòng lặp thứ i, thì dãy [0,i] đã được sắp xếp.

* Singly Linked List.
	* định nghĩa
		* là tập hợp các phần tử cùng loại và mỗi một phần tử sẽ
		liên kết với một phần tử tiếp theo.
	* cấu trúc: một phần tử là một node
		* một node bao gồm hai phần:
			* phần chứa giá trị
			* phần chứa con trỏ, trỏ đến phần tử tiếp theo.
		* ví dụ một node trong java:
			public class SinglyListNode{
				int value;
				SinglyListNode next;
				SinglyListNode(x) {value = x;}
			}
	* đặc điểm:
		* chỉ cần lưu node đầu tiên (head) là có thể truy xuất cả mảng.
		* khả năng truy xuất 1 phần tử của mảng: O(n)
		* khả năng thêm và xóa 1 phần tử: O(1)*, '*':vị trí đó phải biết trước.
	* các thao tác hay dùng:
		* thêm vào đầu list
			* gán head vào node mới, node mới trỏ đến node vừa là head.
		* chèn vào giữa list
			* gán next của node mới cho node tiếp, gán next của node trước node mới là node mới.
		* thêm vào cuối list:
			* xác định phần tử cuối cùng last, trỏ last bằng node mới, node last cũ trỏ lến last.
		* xóa phần tử:
			* xác định pre, cur, next, lấy pre trỏ vào next.
			* giải phóng vùng nhớ cho cur, trong java sẽ tự dọn, không cần làm
			* java sẽ tự giải phóng các vùng nhớ không có biến nào trỏ đến.
		* xóa đầu list:
			* xác định head, next, gán head là next.
		* xóa phần tử cuối list:
			* xác định pre, last, trỏ last vào pre.

* Floyd's Cycle Detection

* Stack and Queue
	* Queue: hàng đợi, hoạt động thep nguyên tắc FIFO: first in first out.
		* ứng dụng cho Breadth-First search (BFS)
	* Stack: ngăn xếp, hoạt động theo nguyên tắc FILO: first in last out.
		* ứng dụng cho Depth-First search (DFS)
	* các thao tác chính khi làm việc:
		* push
		* pop
		* isFull
		* isEmpty
	* cách triển khai:
		* dùng array:
			* Queue: có hai con trỏ, một cái trỏ vào đầu, một cái trỏ vào cuối
			* Stack: có một con trỏ luôn trỏ vào đầu mảng.
		* dùng link list.
			* Queue: có hai con trỏ, một cái trỏ vào đầu, một cái trỏ vào cuối
			* Stack: có một con trỏ luôn trỏ vào đầu mảng.
	* ví dụ minh họa sử dụng array.
		* Queue:
			public class MyQueue{
				private int[] array;
				private int SIZE;
				private int head;
				private in tail;
				MyQueue(int size){
					array = new int[size];
					SIZE = size;
				}
			}
		* Stack:
			public class MyStack{
				private int[] array;
				private int SIZE;
				private int top;
				MyQueue(int size){
					array = new int[size];
					SIZE = size;
				}
			}

* PRACTICE
	* array.
	

* HEAP
