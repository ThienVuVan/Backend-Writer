** Docker **

*Lession 01*
	1. Docker là gì?
		- Image: là các bộ cài như MySQL, Ubuntu ...;
		- Container: là máy ảo được tạo ra từ Image;
		- DockerHub: là nơi quản lý các Image (giống github);
		- Dockerfile: là một tập tin bao gồm các chỉ dẫn để build một image;
		- Volume: lưu data ra ngoài container;
		- Docker-Compose: edit docker file
	2. Cài đặt Docker trên window.
		* enable 2 feature của window
			- hyper-v (WSL2 - Linux)
			- window powersell
	3. Check version.
		* docker -- version
		* docker-compose --help

1. Basic command for image
	* docker image pull <image> : pull image from docker registry to local
	* docker image pull <image>:<tag>: pull image from docker registry to local with tag, if no tag, it will pull the lastest.
	* docker image push <image>:<tag>: push image from local to docker registry.
	* docker image ls | docker images: list all images in local.
	* docker image prune: delelte image does not in use.
2. Basic command for container.
	* docker container run <image>: run image in nomal mode.
	* docker container ls | docker container ls -a : list all container.
	* docker ps | docker ps -a: list all up and exited container.
	* docker container stop <container_id>: stop container.
	* docker container prune: delete all exited container.
	* docker container exec <container_id> <command> : execute command in container in out shell.
3. what is PID 1?
	* container là một máy ảo được chia sẻ phần mềm, nghĩa là nó được chia sẻ các tiến trình để chạy, nó không có hệ hiều hành
	và phần cứng riêng như vmware hay virtual box, và tiến trình chính của container được gọi là PID1, đây là một shell để giao
	tiếp và biểu thị container đang hoạt động, nếu tiến trình này mất đi, container sẽ dừng hoạt động, vì thế, khi xem container
	chạy, bạn sẽ thấy phần command là /bin/sh . sh ở đây là shell.
	* Vì thế khi bạn chạy một container , nó sẽ bị exit luôn tại vì tiến trình chủ đạo đã dừng, vì bạn không ở trong shell, vì
	thế, muốn container chạy ngầm thì bạn phải thêm cờ -it hoặc chạy ở chế độ detach:
	
	* docker run -it <image>
	* docker run -d <image>: chạy ở chế độ detach.
	
	* khi bạn đang ở trong shell chính, tức là ở PID1, muốn thoát thì ấn control+d và container sẽ kết thúc, nếu muốn thoát khỏi
	shell mà không làm cho PID1 kết thúc thì ấn control + p + q.
	
	* docker attach <container_id>: quay lại tiến trình PID1 của container.
	
	* docker exec -it <container_id> sh: sh ở đây là shell, lệnh này giúp bạn vào container nhưng ở một tiến trình phụ, không
	phải PID1, nên nếu bạn control+d tắt tiền trình này đi thì container vẫn chạy, đây là cách để vào một container để điều khiển.
	
	* docker exec -it <container_id> bash: cũng giống như ý trên, bash cũng giống như shell, là tiến trình giúp giao tiếp với container
	ví dụ mình dùng git bash để giao tiếp với git local.
4. Port Mapping.
	* ví dụ chúng ta có một reverse proxy (nginx), chúng ta có chạy một container nginx, và nginx này lắng nghe ở
	port 80 (http) của docker container, nghĩa là chúng ta phải ở trong container và gọi đến port 80 của container bằng câu lệnh,
	nhưng điều này không hợp lý khi muốn gọi bằng broswer ở máy local, điều này có thể giải quyết bằng port mapping.
	* tức là ta sẽ mapping port 80 của máy local với port 80 của container, và khi gọi localhost:80 của máy local, sẽ mapping
	đến port 80 của container nginx và nginx sẽ lắng nghe và trả lại resourse.
	
	* docker run -p <target_port>:<container_port> <image>: câu lệnh này để mapping hai port.
	
	* example: docker run -p 80:80 nginx.
	
	* docker log -f <container_id>: show log của container khi đang chạy, -f nghĩa là follow theo.

5. Volume - bind mount
	* khi chạy container mysql, vấn đề đặt ra khi tắt container đi, thì mọi dữ liệu trong container sẽ mất, giải pháp mà
	docker đưa ra là dùng volume.
	* volume là môt thư mục ảo tạo ra để lưu data bới docker engine, nghĩa là mình sẽ link volume với thư mục lưu data của
	mysql, mọi dữ liệu của mysql container sẽ được bind ra volume, khi stop container, thì dữ liệu ở volume vẫn còn.
	* docker volume create <volume-name>: tạo một volume
	* docker run -v <local_dir/volume>:<container_dir>: khởi chạy một container gắn với một volume.
	
	* example:
		* docker volume create pgdata: tạo volume postgre data.
		* docker run -v pgdata:var/lib/postgresql/data -p 5432:5432 postgre: chạy container postgre, port mapping 5432
		gắn với volume pgdata.
6. DockerFile
	* dockerfile chứa các bước hướng dẫn docker engine thực hiện để tạo image riêng.
	* structure:
		FROM alpine:lastest
		COPY . .
		RUN apk add bash / form excute or shell excute.
		CMD ["bash"] / form excute or shell excute.
		ENTRYPOINT / form excute or shell excute.
	
	* Detail:
		* FROM: là câu lệnh để chọn môi trường cho một image, thường là một linux distribution để có tích hợp môi trường
			phù hợp với dự án, như alpine, debain ..., có tích hợp các công cụ cho project như nodejs, jdk, asp.net.
			* ví dụ:
				FROM alpine:3.4 // trong os alpine:3.4 có bộ công cụ jdk để chạy chương trình java.

		* ADD: dùng để đưa các file local hoặc remote vào image, ví dụ:
			* ADD index.html /vvt/
			* ADD index* /vvt/ -> đưa tất cả file bắt đầu bằng index.
			* ADD https://vvt.html /vvt/ -> đưa file remote. đối với các file remote được bảo vệ, thì ADD không hỗ trợ
				authen, phải dùng câu lệnh RUN. // tìm hiểu thêm
			* Lưu ý:* chỉ có thể add từ trong source code hoặc remote.
					* nếu là thư mục thì chỉ copy nội dung chứ không copy thư mục.
						* ví dụ: ADD /thien/ /vvt/ -> copy tất cả các file trong thien vào vvt.
					* nếu copy thư mục phải có dấu slash ở cuối.
					* nếu file có các ký tự đặc biệt, thì nên cho vào thư mục rồi mới add, để tránh gây lỗi.
					* nếu dest không tồn tại, docker sẽ tự tạo dest rồi copy vào.
					* đối với các file rar hay zip, add sẽ tự giải nén và lấy nội dung.

		* COPY: cũng giống với add, khác add một chút là không hỗ trợ file remote.
			* COPY copy luôn file rar hay zip mà không giải nén.
			* dùng được form excute và shell excute.
			* ví dụ
				COPY ["index.html","/vvt/"]
				COPY /learn/ /vvt/
				COPY . . -> copy tất cả code trong dự án tính từ ngang cấp với file dockerfile.
				* có thể kết hợp phân quyền: COPY [--chown=user:group] index.html /vvt/
	
		* RUN cmd: chạy để build image.
			* nên dùng để build các lệnh như install package, update packge, build package.
			* syntax: RUN command
			* ví dụ: RUN apt-get update
					 RUN npm install
			* dùng được cả form excute và shell excute.
			* form excute có dạng: ["run","parameter", ...]
			* ví dụ: RUN ["apt-get", "update"] // update linux os distribution.
			* shell excute có dạng: run parameter // như một câu lệnh terminal bình thường.
			* Câu lệnh RUN chạy xong xong khi khởi tạo container, nó thường được sử dụng để làm những câu lệnh có liên quan 
				đến môi trường của container.
			* câu lệnh run không bị ghi đè khi có lệnh shell bên ngoài truyền vào.
		
		* CMD cmd: chạy khi container trên image đã build
				* câu lệnh CMD thường được sử dụng để khởi chạy các chương trình từ source code.
				* câu lệnh CMD cũng có thể dùng dạng form excute và shell excute
				* ví dụ: CMD java -jar <filebuild> &
						 CMD ["npm", "start"]
				* nếu có nhiều câu lệnh CMD thì docker luôn chọn câu lệnh CMD cuối cùng để chạy,
				* nếu khi khởi tạo container với một lệnh shell, thì câu lệnh CMD cuối cùng trong dockerfile
					sẽ bị ghi đè. để không bị ghi đè ta có thể dùng ENTRYPOINT. 
					* ví dụ: docker run -it <imageId> echo "hello world!" -> thay luôn cmd cuối bằng shell truyền vào.
				* nếu cmd không đúng, bạn có thể hiểu nó là parameter của câu lệnh ENTRYPOINT bên trên.
				* form excute không thể là parameter cho ENTRYPOINT được, chỉ shell excute. // upadate
		
		* ENTRYPOINT cmd: giống với câu lệnh CMD, nhưng khác với CMD là nó sẽ không bị ghi đè khi có một shell CMD truyền vào
			khi khởi tạo container. và CMD ở dạng shell có thể là một parameter mặc định cho ENTRYPOINT.
				* ví dụ: ENTRYPOINT ["java", "-jar"]
						 CMD ~/bookstore.jar & // câu lệnh này không hề đúng, nên nó là parameter của ENTRYPOINT.
						 // hai câu lệnh trên sẽ được ghép thành java -jar ~/bookstore.jar &
				* chú ý: nếu ENTRYPOINT là shell excute, thì sẽ docker sẽ bỏ qua hết CMD sau nó, không nhận là parameter.
				
		* cơ chế cache:
			* khi chạy lại image, nếu không có gì thay đổi về file hay package, docker sẽ cập nhật mới hay thay đổi
				gì qua các câu lệnh như RUN, ADD, COPY, mà chỉ chạy các câu lệnh ENTRYPOINT, CMD để khởi tạo chương trình.
			* nếu chạy lại image, có các file thay đổi, thì docker chỉ copy các file thay đổi vào.
			* tìm hiểu thêm, ở đây chưa rõ ràng về cơ chế cache.
			
		* WORKGIR path: chỉ định thư mục làm việc cho các lệnh ADD, COPY, RUN.
			* ví dụ: RUN mkdir /app
					 WORKGIR /app
					 COPY index.html .
					-> ở đây thư mục được chỉ định để làm việc là /app, nên chỉ cần để '.', docker sẽ tự hiệu copy vào /app.
		
		* USER name: chỉ định user nào làm việc.
			* user phải có sẵn trong image mới chỉ định được.
			* hoặc nếu không có thì khai báo user
			* ví dụ:
				FROM ubuntu
				RUN addgroup app && adduser -S -G thien app
				USER thien
				-> tạo mới group và user và sử dụng user thien để chạy các câu lệnh.
		
		* ENV key=value : (envirment), lưu giá trij dưới dạng key=value.
			* dùng để add các metadata vào image và container.
			* ví dụ:
				ENV userName = thien
				// or
				ENV userName thien
			* key và value phải là duy nhất, nếu một key và nhiều value thì lấy cái cuối cùng.
				* ví dụ: ENV name = thien
						 ENV name = luong -> docker lấy cái này.
			* ví dụ:
				ENV folderName = thien
				ADD index.html $folderName
				// or
				ADD index.html ${folderName}
				* dùng được cho cả copy, run, cmd ...
			* có thể truyền váo khi khởi chạy container
				* ví dụ: docker run <imageID> -e "key=value"
		
		* ARG key=value: cũng có dạng key=value. có tính chất như ENV.
			* dùng để add các metadata vào image, không vào đc container.
			* ENV áp dụng được cho các câu lệnh chạy trên cả image và container.
			* ARG chỉ áp dụng cho các câu lệnh build image như: ADD, COPY, RUN.
			* có thể truyền vào khi khởi chạy container như ENV.
		
		* EXPOSE port: dùng để xuất port
			* ví dụ:
				EXPOSE 80
				-> đưa ra port 80 để mapping.
		
		* LABLE key="value": lưu key="value" // lưu ý dạng chuỗi.
			* truyền metadata vào image.
			* một image có thể lưu nhiều lable, key trùng lấy cuối.
			* cách để xem các metadata của image, chạy câu lệnh sau.
				docker inspect image <imageID>
		
		* MAINTAINER <name> : set tên tác giả của image
			* tại sao không dùng lable: bây h người ta dùng lable.
			* maintainer đã bị bỏ đi.
			
		* VOLUME: chia sẻ file giữa local và container.
			* chia sẻ dữ liệu từ container ra local hoặc ngược lại.
			* container build trên image
			* container map với volume, volume by share file from local.
			* khi sửa, volume là new value, trong container là old value.
			* khi volume được map với container, old value trong container sẽ
				được merge new value.
		
		* ví dụ một docker file để chạy dự án springboot:
			FROM alpine:3.4
			COPY /targer/bookstore.jar /myfile
			RUN apt-get update
			CMD java -jar /myfile/bookstore.jar &
		
		// Lưu ý, khi khởi chạy container nhớ port mapping ra máy local, nếu không không kết nối được với chương trình.

* Docker NetWork:
		
	