* Oauth 2: là authorization protocol, chứ không phải authentication protocol, tức là nó server cần được user cấp quyền để truy cấp
	user resource trong provider(google, github ...) chứ không phải là Oauth đi xác minh user đó có hợp lệ hay không.
	* oauth 2 khác với oauth 1 là có thể access được với user resource mà không cần user cung cấp credential để truy cập vào bên provider,
	chỉ cần user cấp quyền cho server.
	* oauth 2 sử dụng access token để truy cập vào bên thứ 3, oauth 2 không có đinh dạng token riêng, nhưng đa số là dụng định dạng JWT.
	* Spring Security OAuth xây dựng Spring Security, tức là Spring Security có gì, Spring Security OAuth có cái đấy.
	* Spring Security OAuth tích hợp thêm và triển khai giao thức OAuth 2.0 trong ứng dụng Spring
	* OAuth 2.0 là một giao thức ủy quyền mạnh mẽ
	* oauth là một protocol, đã phát triển đến version 2 nên gọi là oauth2.
	* ví dụ luồng oauth2 đơn giản như sau:
		* khi application muốn truy cập vào google để lấy user-resource, application sẽ gọi đến trang google login để user nếu chấp nhận
		sẽ đăng nhập và có thể gán quyến cho phiên đó.
		* sau đó google sẽ trả access token về cho application, và application sẽ dùng token để truy cập vào google để lấy user-resource,
		google sẽ validate whether that access token is valid, nếu valid, application sẽ được lấy các resource mà access token đó được gán.
	
* Flyway là một công cụ quản lý phiên bản cơ sở dữ liệu (database migration tool) được sử dụng để quản lý và tự động hóa việc triển khai
 và cập nhật schema của cơ sở dữ liệu. Nó giúp quản lý các phiên bản của cơ sở dữ liệu thông qua các tập tin migration, điều này làm cho
 việc theo dõi và duy trì schema trở nên dễ dàng hơn trong quá trình phát triển ứng dụng.
	* Migration Scripts: Flyway sử dụng các tập tin script SQL để mô tả các thay đổi cấu trúc cơ sở dữ liệu.
	Mỗi script có một số phiên bản và được áp dụng theo thứ tự phiên bản.
	* Version Control: Các migration script được quản lý như mã nguồn thông qua quản lý phiên bản, giúp theo dõi và kiểm soát các thay đổi
	trong cơ sở dữ liệu theo thời gian.
	* Command-Line và API: Flyway có thể được sử dụng thông qua giao diện dòng lệnh hoặc tích hợp vào quy trình triển khai tự động của
	bạn bằng cách sử dụng API Java.
	* Đa nền tảng: Flyway hỗ trợ nhiều loại cơ sở dữ liệu như MySQL, PostgreSQL, SQL Server, Oracle, và nhiều loại khác.
	* Integrations: Nó tích hợp tốt với các công cụ phổ biến khác trong quá trình phát triển phần mềm và triển khai như Maven,
	Gradle, Ant, Spring, và nhiều hơn nữa.
	* Mỗi file script là một version của database, nếu version này đã được lưu trong db, nếu bạn thay đổi scripts trong file script này,
	flyway sẽ báo lỗi vì xung đội version, mỗi khi muốn thay đổi database, bạn phải tạo một file script mới và viết script vào đó.
	* file script có câu trúc như sau: 'V1__des_des.sql' : trong shema sẽ có table flyway history để lưu vesion này.
	* flyway sẽ tự động đọc các file này đựt trong folder resource/db/migration/file.sql và chạy đến file cuối cùng.

* spring cloud euruka
	* hiểu là discovery server, là trung tâm kết nối các service lại với nhau, giúp các service có thể biết nhau và gọi đến nhau.
	* khi khởi động một service, khi service này được setting là euruka client, service này sẽ gọi đến euruka server với đường dẫn
	được setting trong properties hoặc yml, và được euruka server nhận là một client và euruka server sẽ trả về cho euruka client
	tất cả các service đang có trong euruka server.
	* khi service này gọi đến 1 service khác, nếu service này đã lưu service cần gọi đến đang có địa chỉ ở đâu, thì nó sẽ không cần 
	gọi đến euruka server để tìm service theo tên (tên của service được đặt trong properties hoặc yml, tên của service sẽ được euruka
	server lưu trữ đánh dấu cho địa chỉ của service đang chạy), tên ở đây là webclient đang gọi đến.
	* nếu service cần gọi đến chưa được lưu trong service gọi, thì service gọi sẽ gọi đến euruka server để tìm service cần gọi.
	* lưu ý: nếu một service được chạy trên nhiều địa chỉ khác nhau (multiple service), tức là một tên nhưng có nhiều phiên bản chạy trên
	nhiều cổng khác nhau, thì service sẽ bị confused, không biết cần gọi service nào, điều này khiến webclient không biết cần chọn service
	đang chạy trên cổng nào để chọn, nên cần cài đặt webclient có anotation @Loadbalance (cân bằng tải) thì webclient sẽ chỉ gọi đến 1 service
	trong nhiều service giống nhau.
	* sẽ update các thuật toán loadbalance cho server để cân bằng luồng request chia đều cho các server sau.
	
* spring cloud gateway
	* gateway (spring cloud gateway) được xây dựng trên spring reactor, hay spring webflux, dùng để route, pridicate, filter các request
	và gửi đến các service khác trong hệ thống
	* có nhiều loại api-gateway như Kong Api, ... nhưng ở đây ta dùng spring-cloud-gate trong landscape của spring.
	* vấn đề đặt ra khi trong một landscape có nhiều service, và mỗi service chạy trên một port hoặc một ip khác nhau, nếu muốn gọi đến
	service nào thì cần gọi địa chỉ riêng của service đó, điều này does not make sence lắm. chính vì thế cần một service đứng ra nhận
	tất cả các request và phân loại để gửi đến service tương ứng.
	* api-gateway ra đời để giải quyết vấn đề trên, và trong spring ta sử dụng spring-cloud-gateway
		* ba điểm đặc biệt trong api-gateway (spring) là: routes, predicate, filters.
			* route: dùng để lưu uri cần route tới và cả id của route
			* predicate: dùng để phân loại request để match request = true thì route tới service tương ứng.
			* filter: dùng để biến đổi request và route tới service tương ứng.
		* một điều quan trọng: vì api-gateway cũng là một service nằm trong microservice landscape, nên nó cũng phải là một euruka client
		để có thể call euruka server để lấy tất cả các name và địa chỉ của các service trong landscape để route, và khi gọi route nó cũng
		cần cơ chế loadbalance trong trường hợp có nhiều một service-name mà có nhiều địa chỉ đang chạy. (chỉ cần thêm lb trước uri, xem code)
		
* TestContainer
	* là một thư viện của java, cung cấp tính năng testing api và sử dụng junit5
	* trong việc phát triển api, khi test api, ta hay gọi trực tiếp đến database, và khi gọi nhiều test nhiều, database sẽ confused database
	và không thuận tiện khi phải gọi api thông qua bên bên thứ ba như brower, postman ...
	* thế làm sao để gọi đc api trong chính project và không sử dụng đến database, giải pháp là dùng TestContainer kết hợp với MockMVC
	và Junit5
	* TestContainer cung cấp cách initialize và pull một image và run thành container của database về, cung cấp dynamic properties
	để truy cập vào database trong container.
	* MockMVC sẽ dùng perform để gọi đến api, và khi chạy test, api sẽ hoạt động với database trong container chứ không phải db thật,
	khi test xong, container sẽ stop và mọi thứ biến mất, kết quả test sẽ được trả về, không phải làm việc gì với db thật.
	* Junit: dùng viết test (chắc ai cũng biết rồi ha)

* WebClient (asynchronous, non-bloking)
	* làm thế nào để service này có thể gọi đến service thông qua api, ta có thể sử dụng RestTemplate hoặc WebClient, trong lần viết này
	ta sẽ sử dụng webclient.
	* WebClient là Object nằm trong module webflux (built on spring reactor), chứ không phải nằm trong springmvc.
		* cho nên nó dùng cho lập trình non-bloking và asynchronous. (nó cũng có thể thực hiện các cuộc gọi block)
	* WebClient Bean dùng để gọi đến các api ở service khác, built RequestParam, Built Mono, request synchronous hoặc Asynchronous.
	* Hỗ trợ loadbalance khi có nhiều service thông qua anotaion @LoadBalanced
	* cách config xem trong code (phần này sẽ đọc docs và update thêm)
	* phải tìm hiểu thêm để kiểm soát được process.
	* tìm hiểu luôn resttemplate(synchronous, blocking)

* resttemplate gọi api theo synchronous và blocking, tức là luồng hiện tại sẽ bị block lại cho đến khi có resource trả về,
	hạn chế sử dụng resttemplate trong lập trình phản ứng.

* KeyCloak
	* có rất nhiều loại authentication server, như google identity, OKTA, Spring Authentication Server (early access)
	nhưng ở đây sử dụng keycloak.
	* keycloak là một authentication server.
	* trong spring sẽ cấu hình những thứ cần thiết như sau:
		* client-id
		* client-secret
		* scope
		* redirect-uri: gọi khi authen thành công.
		* isser-uri: dùng để client gọi đến các uri liên quan để thực hiện quá trình authen, client sẽ truy cập vào isser-uri để fetch
		tất cả các uri cần thiết về.
	* trong keycloak cần cấu hình các thứ sau:
		* realm: chứa các client, user, role ...
		* client: client-id, client-authentication(on), redirect-uri.
		* user: name and password
	* flow:
		* 1 khi vào api được bảo vệ, khi client đã được cấu hình oauth2 sẽ dựa vào isser-uri để gọi đến uri sau
		http://localhost:8180/realms/Demo/protocol/openid-connect/auth?
		keycloak sẽ mở ra trang login, và client cũng gửi các query string parameter đã config trong properties.
		* 2 khi resource owner login(cấp quyền cho client), keycloak sẽ tự động gọi đên uri sau
		http://localhost:8180/realms/Demo/login-actions/authenticate? để authenticate form data được gửi lên
		* 3 nếu thành công keycloak sẽ gọi đến redirect-uri được setting sẵn hoặc đã được client gửi lên cùng với một mã code.
		* 4 client sẽ dùng mã code dựa isser-uri gọi đến authentication server
		* 5 authentication server sẽ trả về các thông tin như access token và id token.
		* 6 client sẽ dựa vào access token và id token (and other info) để authen và set vào security context, 
		* 7 client redirect đến endpoint một lần nữa.
		* bạn không cần quan tâm việc spring security sử lý dữ liệu được trả về như thế nào, muốn lấy thông tin của user, hãy vào
		securitycontext để lấy.
		* nếu muốn xem response keycloak trả về khi client gọi, run mode debug trong OidcAuthorizationCodeAuthenticationProvider.class
		break point tại dòng 'return AuthenticationResult'.
	* flow ở trên cũng giống như bốn provider được spring security oauth2 cấu hình sẵn (google, facebook, hithub, okta)
	vào CommonOAuth2Provider.class để xem 4 provider trên được cấu hình như thế nào.
	* Note
		* confidential client: là những service backend, cần trao đổi với các provider dưới nền, không thể hiện ra bên ngoài
		* public client hay public facing client: là các project frontend như reactjs, anguler, Vue, MobilePhone ...
		* access token: chỉ là đoạn mã được sinh ra bởi các ký tự vô nghĩa, với oauth2 protocol, chỉ access token được trả về
		* nhưng với OIDC protocol (open id connect): được xây dựng từ oauth2, sẽ trả về cả access token và id token.
		* id token: là đoạn mã được sinh ra và tích hợp các thông tin vào trong đó như: name, email, role ... (như đã thấy khi chạy debug
		và đặt break point trong OidcAuthorizationCodeAuthenticationProvider.class).
	* Nếu muốn kiểm soát tốt quá trình authen cà project ít service, thì nên tự triển khai authentication. giúp mã nguồn dễ hiểu hơn.
	* Đối với nhiều service và một hệ thống thực sự lớn, nên triển khai thông qua authentication server bên ngoài.
	* Dự án sắp tới chắc sẽ tự triển khai security trong api gateway.
	
* Cần làm rõ một số khái niệm:
	* Sync/Async code và Sync/Async communication.
	* Sync code: code đồng bộ - code này chạy xong code kia mới chạy được, chương trình chỉ có một main thread
	* Async code: code bất đồng bộ - bằng cách sử dụng multi-thread hoặc các thư viện hỗ trợ lập trình non-bloking và asynchronous.
		* ví dụ sử dụng Thread, Runable, Callabe, CompletableFuture, Future, Excutor ...
		* sử dụng các thư viện trong lập trình reactive như publiser, subcriber ...
	* Sync/Async communication (là việc sử lý quá trình các api giao tiếp với nhau)
		* khi api này gọi đến api kia bằng Sync communication, khi api được gọi không trả lời hoặc trả lời chậm, api đang gọi sẽ bị dừng
		không chạy tiếp được vì chưa có kết quả trả về của api được gọi, và thế là khi một service dừng, thread main của bạn đứng lại,
		ứng dụng của bạn toang (bị treo), không sử lý được task khác.
		-> Đó là Sync communication (api này cần kết quả của api kia mới chạy tiếp được), cái này cần giải quyết bằng timlimiter
		và code bất đồng bộ.
		* đối với Async communication, khi các api gọi đến nhau, nó sẽ không quan tâm có được response hay không,
		task mà api thực thi sẽ được chuyển thành đơn giản là chỉ gửi event cho task khác.
		* sử dụng kafka để thực hiện Async communication, và áp dụng Resilience4J Circuit Breaker để kiểm soát gọi api.

* Circuit Breaker là gì?
	* Dịch sang nghĩa tiếng việt đó nôm na là là người ngắt mạch.
	* Circuit breaker thực chất là set of state (closed, open, half-open)
	* là một mô hình kiến trúc được sử dụng để quản lý và kiểm soát các lỗi trong hệ thống phần mềm. được thiết kế để giảm thiểu tác động
	của lỗi và ngừng gửi các yêu cầu tới một dịch vụ hay thành phần cụ thể khi lỗi xảy ra quá mức cho phép.
	* khi một service này gọi đến 1 service khác, simulate trong trường hợp service được gọi đã tắt, thì làm sao để service này lần sau biết
	là service được gọi hiện tại không hoạt động và không cần gọi nữa để tăng hiệu năng chương trình, Circuit Breaker sẽ triển khai việc này.
	* circuit breaker có ba trạng thái:
		* closed: service được gọi đang được đánh dấu là hoạt động bình thường.
		* open: service được gọi đang được đánh dấu là đã đóng.
		* half-open: service được gọi đang được gọi lại để kiểm tra xem đã mở lại hay chưa.
	* flow như sau:
		* khi service gọi này gọi đến service được gọi, nếu hoạt động gửi và phản hồi ok, thì state của circuit breaker là closed
		* khi service được gọi không trả lời hoặc trả lời quá chậm hoặc sau bao nhiêu lần gửi vẫn không trả lời(tùy vào setting)
		state của circuit breaker sẽ được set về open, lần sau khi gọi thì circuit breaker sẽ gọi luôn fallback chứ ko gọi service
		được gọi nữa.
		* sau một khoảng thời gian nào đó (tùy vào setting), circuit break sẽ chuyển sang trạng thái half-open, circuit breaker sẽ gọi
		đến service được gọi để xem service đó đã on hay chưa, nếu kết nối bth, state của circuit breaker sẽ chuyển thành closed, nếu không
		state lại trở về open.
	* đó là những cơ bản về circuit breaker architecture (sẽ update thêm).
	
* spring-boot-starter-actuator
	* là một phần của Spring Boot Actuator, một dự án con của Spring Boot, được thiết kế để cung cấp các chức năng quản lý ứng dụng
	và theo dõi trạng thái của ứng dụng Spring Boot. 
	* Spring Boot Actuator cung cấp các "endpoint" mà bạn có thể sử dụng để lấy thông tin về trạng thái của ứng dụng.
	Ví dụ: /health, /info, /metrics, /env ...
	* Quản lý ứng dụng (/actuator endpoint):
	* Cung cấp một tập hợp các endpoint cho việc quản lý ứng dụng, ví dụ như /shutdown để tắt ứng dụng một cách an toàn,
	/beans để hiển thị tất cả các bean được đăng ký, và nhiều endpoint khác.
	* (update soon).
	* có thể xem các api của actuator trong ide intelij có hỗ trợ.
		* http://localhost:61860/actuator/beans
		* /actuator/retryenvent
		* /actuator/timelimeter
		* /actuator/health
		* nhiều api có thể xem đc nhiều thông số của application (tự tìm hiểu).
		
* Resilience4J là gì ?
	* và để triển khai kiến trúc circuit breaker, tất nhiên là không làm bằng này, có nhiều thư viện hỗ trợ trong java.
	* trong Module spring cloud circuit breaker, ta sẽ chọn sử dụng Resilience4J để triển khai circuit breaker architecture.
	* sẽ update cách config và triển khai sau.
	
	The decoration is as follows:
	* CircuitBreaker ( TimeLimiter ( BulkHead ( method ( ) ) ) ) 
	Method is invoked in a Thread Pool.
	TimeLimiter limits the time of the thread, but the CompletableFuture is not/cannot be cancelled.
	CircuitBreaker records exceptions.
	* Retry ( CircuitBreaker ( RateLimiter ( TimeLimiter ( Bulkhead ( method() ) ) ) ) )
	* sẽ triển khai circuit breaker, còn timlimiter và retry sẽ nghiên cứu và triển khai sau, bởi vì đang gặp một lỗi
	do chưa nghiên cứu kĩ lập trình reactive. (lỗi không dừng được luồng chạy khi timeout, làm cho lỗi logic).
	* sẽ nghiên cứu hủy CompletableFuture khi timeout sau.
	* đối với api có gọi đến service khác, triền khai bất đồng bộ
	* đối với api không gọi đến service khác, triền khai đồng bộ

* Publisher, Subcriber, Subcription, Flux, Mono ?
* Spring Cloud Sleuth ?
	* Help Distributed Tracing.
	* Help generate spanId and traceId for per request in application.
* Zipkin
	* for visualize the distributed tracing of application.
	
* spring web flux - cho lập trình reactive programing
* spring cloud được xây trên spring webflux, chứ không phải spring web mvc
* nếu bean cấu hình bằng method ,spring sẽ tạo ra bean với tên riêng là tên method, và chỉ khai báo đúng tên mới dùng đc.
* mọi logic nên sử lý ở tầng service.
* valid in model or dto
* transactional(readOnly = true) // transaction này chỉ có quyền đọc, không có quyền ghi vào database.
* mn clean verify
* với nhưng public api, nên để là /public thì lúc filter không phải viết nhiều.
* có hai kịch bản:
	* 1 phát triển project cũ lên microservice
		* có sẵn, chỉ cần chia nhỏ ra các project, tiết kiệm đc chắc 2 tháng.
		* tích hợp thêm công nghệ, có thể đảo lộn nhiều luồng dữ liệu, nhưng có khung
	* 2 phát triển cái mới
		* thời gian phát triển ý tưởng và database và system khá lâu.
		* chấp nhận lâu

* CircuitBreaker bắt được runtime exception trong luồng nó thực thi.
* controller advice không bắt được exception ở luồng khác.
* tự code mapDto.
		